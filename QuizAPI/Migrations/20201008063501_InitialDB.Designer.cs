// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Models;

namespace QuizAPI.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20201008063501_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuizAPI.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DaysBetweenQuizes")
                        .HasColumnType("int");

                    b.Property<string>("DefaultUserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<string>("UserRoles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("QuizAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("QuizAPI.Models.Participant", b =>
                {
                    b.Property<string>("ParticipantID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastResetDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Q1Grade")
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("Q2Grade")
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("Q3Grade")
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal?>("Q4Grade")
                        .HasColumnType("decimal(5,3)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantID");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("QnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Answer")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("AnswerDescription")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Option5")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Qn")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("QnTime")
                        .HasColumnType("int");

                    b.Property<bool>("QnVolatile")
                        .HasColumnType("bit");

                    b.HasKey("QnID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz", b =>
                {
                    b.Property<int>("QuizID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParticipantID")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Quizdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5,3)");

                    b.Property<int?>("TimeSpent")
                        .HasColumnType("int");

                    b.HasKey("QuizID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("QuizAPI.Models.QuizResult", b =>
                {
                    b.Property<int>("QRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnsStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Countable")
                        .HasColumnType("bit");

                    b.Property<string>("ParticipantID")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("QnID")
                        .HasColumnType("int");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.HasKey("QRID");

                    b.HasIndex("ParticipantID");

                    b.HasIndex("QnID");

                    b.HasIndex("QuizID");

                    b.ToTable("QuizResult");
                });

            modelBuilder.Entity("QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizAPI.Models.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantID");
                });

            modelBuilder.Entity("QuizAPI.Models.QuizResult", b =>
                {
                    b.HasOne("QuizAPI.Models.Participant", "Participant")
                        .WithMany("QuizResults")
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuizAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Models.Quiz", "Quiz")
                        .WithMany("QuizResults")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
